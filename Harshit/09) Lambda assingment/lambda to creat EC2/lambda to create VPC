AWS Lambda — Launch VPC



Step 1 – create IAM role for lambda function
Select Role > Create Role > Select AWS service > Select Lambda As a use case and create a role with the below policy.

Step 2 Lambda part -
1.	Select Functions > Create Function
2.	Enter the name of your lambda function.
3.	Select python as a runtime language.
4.	Click on Choose or create an execution role > Select Use an existing role.
5.	Click Create Function.
6.	Navigate to AWS lambda  
7.	Select Functions > Create Function
8.	Click on Choose or create an execution role > Select Use an existing role .



import boto3
	

	ec2 = boto3.resource('ec2', region_name='us-east-2')
	

	# create VPC
	vpc = ec2.create_vpc(CidrBlock='192.168.0.0/16')
	# we can assign a name to vpc, or any resource, by using tag
	vpc.create_tags(Tags=[{"Key": "Name", "Value": "default_vpc"}])
	vpc.wait_until_available()
	print(vpc.id)
	

	# create then attach internet gateway
	ig = ec2.create_internet_gateway()
	vpc.attach_internet_gateway(InternetGatewayId=ig.id)
	print(ig.id)
	

	# create a route table and a public route
	route_table = vpc.create_route_table()
	route = route_table.create_route(
	    DestinationCidrBlock='0.0.0.0/0',
	    GatewayId=ig.id
	)
	print(route_table.id)
	

	# create subnet
	subnet = ec2.create_subnet(CidrBlock='192.168.1.0/24', VpcId=vpc.id)
	print(subnet.id)
	

	# associate the route table with the subnet
	route_table.associate_with_subnet(SubnetId=subnet.id)
	

	# Create sec group
	sec_group = ec2.create_security_group(
	    GroupName='slice_0', Description='slice_0 sec group', VpcId=vpc.id)
	sec_group.authorize_ingress(
	    CidrIp='0.0.0.0/0',
	    IpProtocol='icmp',
	    FromPort=-1,
	    ToPort=-1
	)
	print(sec_group.id)
	

	def lambda_handler(event, context):
	    init_script = """#!/bin/bash
	                yum update -y"""
